# -*- coding: utf-8 -*-
"""D.I.V.E. AI 정착 시뮬레이터 (배포용 최종버전)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0rU8HPGvA34wH7y062ZHRhlBT1_RJPR
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import requests
import json

# ---------------------------------
# 데이터 로드 (가상 데이터)
# ---------------------------------
@st.cache_data
def load_data():
    """애플리케이션에 사용될 모든 데이터를 로드하고 DataFrame으로 변환합니다."""
    region_data = [
        { 'id': 'A', 'name': '강원도 강릉시', 'budget': 280, 'job_tags': ['local', 'digital'], 'community': 4, 'scores': { '비용': 3, '일자리': 4, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
        { 'id': 'B', 'name': '전라북도 전주시', 'budget': 220, 'job_tags': ['local', 'public'], 'community': 5, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 5, '접근성': 4, '문화/여가': 5 } },
        { 'id': 'C', 'name': '제주특별자치도 제주시', 'budget': 350, 'job_tags': ['digital', 'local'], 'community': 4, 'scores': { '비용': 2, '일자리': 5, '커뮤니티': 4, '접근성': 3, '문화/여가': 5 } },
        { 'id': 'D', 'name': '경상북도 안동시', 'budget': 180, 'job_tags': ['local', 'public'], 'community': 3, 'scores': { '비용': 5, '일자리': 2, '커뮤니티': 3, '접근성': 2, '문화/여가': 4 } },
        { 'id': 'E', 'name': '전라남도 순천시', 'budget': 200, 'job_tags': ['local', 'public'], 'community': 4, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
    ]

    job_data = [
        { 'id': 1, 'name': '강릉시 관광 스타트업 마케터', 'type': 'local', 'region_id': 'A', 'base_score': 92 },
        { 'id': 2, 'name': '전주시 한옥마을 콘텐츠 기획자', 'type': 'local', 'region_id': 'B', 'base_score': 95 },
        { 'id': 3, 'name': '제주시 IT기업 원격근무 개발자', 'type': 'digital', 'region_id': 'C', 'base_score': 98 },
        { 'id': 4, 'name': '안동시 유교문화 디지털 아카이브 구축', 'type': 'public', 'region_id': 'D', 'base_score': 88 },
        { 'id': 5, 'name': '순천만국가정원 스마트팜 운영요원', 'type': 'local', 'region_id': 'E', 'base_score': 91 },
        { 'id': 9, 'name': '원격 근무 프론트엔드 개발자', 'type': 'digital', 'region_id': None, 'base_score': 95 },
    ]

    benefits_data = [
        { 'id': 1, 'region_id': 'A', 'category': '청년', 'name': '강릉시 청년 월세 지원' },
        { 'id': 2, 'region_id': 'A', 'category': '창업', 'name': '로컬크리에이터 육성 지원' },
        { 'id': 3, 'region_id': 'B', 'category': '청년', 'name': '전주청년 상상(相生)카드' },
        { 'id': 4, 'region_id': 'C', 'category': '주거', 'name': '제주형 청년 주거보장 정책' },
        { 'id': 8, 'region_id': 'E', 'category': '청년', 'name': '순천시 청년 점프업 프로젝트' },
        { 'id': 7, 'region_id': 'D', 'category': '주거', 'name': '귀농인 정착장려금 지원' },
    ]
    return pd.DataFrame(region_data), pd.DataFrame(job_data), pd.DataFrame(benefits_data)

region_df, job_df, benefits_df = load_data()

# ---------------------------------
# Streamlit 앱 UI 구성
# ---------------------------------

st.set_page_config(layout="centered", page_title="D.I.V.E - AI 정착 나침반")

# --- CSS 스타일 ---
st.markdown("""
<style>
    .stApp {
        background-color: #f0f4f8;
    }
    .main-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: 800;
        color: #1f2937;
    }
    .sub-title {
        text-align: center;
        font-size: 1.125rem;
        color: #6b7280;
        margin-top: 0.5rem;
        margin-bottom: 3rem;
    }
    .step-card {
        border: 1px solid #e5e7eb;
        border-radius: 0.75rem;
        padding: 1.5rem;
        height: 100%;
        background-color: #ffffff;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }
    .step-title {
        font-size: 1.125rem;
        font-weight: 700;
        color: #374151;
        border-bottom: 2px solid #f3f4f6;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }
    .result-grid-item {
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
        padding: 1rem;
        background-color: #f9fafb;
    }
</style>
""", unsafe_allow_html=True)


# --- 타이틀 ---
st.markdown('<p class="main-title">D.I.V.E 플랫폼 핵심 기능</p>', unsafe_allow_html=True)
st.markdown('<p class="sub-title">AI 기반 정착 시뮬레이터의 사용자 여정 및 핵심 기능</p>', unsafe_allow_html=True)


# --- STEP 1 & 2 ---
col1, col2 = st.columns(2)

with col1:
    with st.container(border=True):
        st.markdown('<h2 class="step-title" style="font-size: 1.125rem; font-weight: 700; color: #374151;">STEP 1. 조건 입력</h2>', unsafe_allow_html=True)
        st.caption("정착 희망 조건 설정")

        budget = st.slider("월 가용 예산 (만원)", 100, 500, 260, 10, help="생활비, 주거비 등을 포함한 한 달 예산을 설정해주세요.")
        job_type_display = st.selectbox("희망 직무 유형", ('디지털/원격', '지역 기반(농업/관광)', '공공/사회서비스'))
        community_labels = ['매우 낮음', '낮음', '중간', '높음', '매우 높음']
        community_display = st.select_slider("커뮤니티 선호도", options=community_labels, value='중간')

        # API 키 입력 필드는 로컬 테스트용으로 남겨두고, 실제 배포 시에는 Secrets를 우선 사용합니다.
        api_key_input = st.text_input("Google Gemini API 키 (선택 사항)", type="password", help="클라우드 배포 시에는 이 칸을 비워두고 Secrets에 키를 저장하세요.")

with col2:
    with st.container(border=True):
        st.markdown('<h2 class="step-title" style="font-size: 1.125rem; font-weight: 700; color: #374151;">STEP 2. AI 분석</h2>', unsafe_allow_html=True)
        st.caption("데이터 기반 최적지 탐색")
        st.markdown("""
        - 🏠 **주거/생활비 분석:** 국토부 실거래가 및 지역 물가 데이터 기반
        - 💼 **일자리 접근성 분석:** 고용노동부 및 민간 채용 데이터 기반
        - 👨‍👩‍👧‍👦 **커뮤니티 활성도 분석:** 지역 커뮤니티 및 문화 시설 데이터 기반
        - ✔️ **최종 정착점수 및 적합도 계산**
        """)

st.markdown("<div style='text-align: center; font-size: 2rem; color: #9ca3af; margin: 2rem 0;'>↓</div>", unsafe_allow_html=True)


# ---------------------------------
# 핵심 로직
# ---------------------------------
job_type_map = {'디지털/원격': 'digital', '지역 기반(농업/관광)': 'local', '공공/사회서비스': 'public'}
job_type_val = job_type_map[job_type_display]
community_val = community_labels.index(community_display) + 1

filtered_regions = region_df[(region_df['budget'] <= budget) & (region_df['job_tags'].apply(lambda x: job_type_val in x))].copy()
if filtered_regions.empty:
    filtered_regions = region_df[region_df['budget'] <= budget].copy()
if filtered_regions.empty:
    filtered_regions = region_df.copy()

scores = [ (5 - abs(row['community'] - community_val)) * 0.4 + row['scores']['일자리'] * 0.6 for _, row in filtered_regions.iterrows() ]
filtered_regions['final_score'] = scores
best_region = filtered_regions.loc[filtered_regions['final_score'].idxmax()]

# --- STEP 3 ---
with st.container(border=True):
    st.markdown('<h2 class="step-title" style="font-size: 1.125rem; font-weight: 700; color: #374151;">STEP 3. 통합 결과 리포트</h2>', unsafe_allow_html=True)
    st.caption("AI 시뮬레이터를 통해 제공되는 4가지 핵심 정보")

    grid_col1, grid_col2 = st.columns(2)

    with grid_col1:
        with st.container(border=True):
            st.markdown("**A. 지역 추천 & 정착 점수**")
            st.caption(f"추천 지역: **:blue[{best_region['name']}]**")

            sub_col1, sub_col2 = st.columns(2)
            with sub_col1:
                st.markdown("<p style='font-size: 0.75rem; text-align: center; font-weight: 600;'>종합 정착 점수</p>", unsafe_allow_html=True)
                radar_fig = go.Figure(data=go.Scatterpolar(
                    r=list(best_region['scores'].values()),
                    theta=list(best_region['scores'].keys()),
                    fill='toself'
                ))
                radar_fig.update_layout(height=200, margin=dict(l=40, r=40, t=40, b=40))
                st.plotly_chart(radar_fig, use_container_width=True)

            with sub_col2:
                st.markdown("<p style='font-size: 0.75rem; text-align: center; font-weight: 600;'>예상 월별 수입/지출</p>", unsafe_allow_html=True)
                income = (best_region['scores']['일자리'] / 5) * 400 + 150
                finance_data = {'금액': [income, best_region['budget']]}
                finance_df = pd.DataFrame(finance_data, index=["수입", "지출"])
                st.bar_chart(finance_df, height=180)

        with st.container(border=True):
            st.markdown("**C. 맞춤 혜택 정보**")
            matched_benefits = benefits_df[benefits_df['region_id'] == best_region['id']]
            if not matched_benefits.empty:
                tags = ""
                for _, row in matched_benefits.iterrows():
                    tags += f"<span style='background-color: #e0e7ff; color: #3730a3; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 600; margin-right: 0.5rem;'>{row['category']}</span>"
                st.markdown(tags, unsafe_allow_html=True)
            else:
                st.info("관련 혜택 정보 없음")


    with grid_col2:
        with st.container(border=True):
            st.markdown("**B. 추천 일자리 매칭**")
            jobs_to_match = job_df.copy()
            is_digital_remote = (jobs_to_match['type'] == 'digital') & jobs_to_match['region_id'].isnull()
            is_local_match = jobs_to_match['region_id'] == best_region['id']
            matched_jobs = jobs_to_match[(jobs_to_match['type'] == job_type_val) & (is_digital_remote | is_local_match)]

            if not matched_jobs.empty:
                suitability_scores = [min(99, job['base_score'] + (5 if community_val >= 4 and best_region['community'] >= 4 else 0) + (3 if budget > best_region['budget'] + 50 else 0)) for _, job in matched_jobs.iterrows()]
                matched_jobs['suitability'] = suitability_scores
                top_jobs = matched_jobs.sort_values(by='suitability', ascending=False).head(2)

                for _, job in top_jobs.iterrows():
                    st.markdown(f"<p style='font-size: 0.875rem; font-weight: 600;'>{job['name']}</p>", unsafe_allow_html=True)
                    st.progress(job['suitability'], text=f"{job['suitability']}%")
            else:
                st.info("추천 일자리 없음")

        with st.container(border=True):
            st.markdown("**D. AI 생성 인사이트**")

            # st.secrets를 우선적으로 확인하고, 없으면 사용자가 입력한 키를 사용합니다.
            api_key = st.secrets.get("GEMINI_API_KEY", api_key_input)

            if not api_key:
                st.warning("AI 기능을 사용하려면 API 키를 입력하거나, 배포 환경의 Secrets에 키를 설정해주세요.")
            else:
                if st.button("AI 정착 컨설팅 및 계획 받기", use_container_width=True):
                    with st.spinner("AI가 답변을 생성 중입니다..."):
                        prompt = f"""
                        당신은 친절한 정착 컨설턴트입니다.
                        한 사용자가 '{best_region['name']}'으로의 이주를 고려하고 있으며, 프로필은 월 예산 {budget}만원, 희망 직무 '{job_type_display}', 커뮤니티 선호도 '{community_display}'입니다.
                        1. **정착 컨설팅**: 위 정보를 바탕으로, 해당 지역에서의 삶이 어떨지에 대해 현실적인 조언을 2~3문장으로 작성해주세요.
                        2. **실행 계획 초안**: 이주를 위한 3단계 실행 계획을 간단히 제안해주세요.
                        """
                        payload = {"contents": [{"role": "user", "parts": [{"text": prompt}]}]}
                        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

                        try:
                            response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
                            response.raise_for_status()
                            result = response.json()
                            if 'candidates' in result:
                                st.success(result['candidates'][0]['content']['parts'][0]['text'])
                            else:
                                st.error("AI 응답 형식이 올바르지 않습니다.")
                        except Exception as e:
                            st.error(f"AI 호출 중 오류 발생: {e}")