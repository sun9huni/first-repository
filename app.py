# -*- coding: utf-8 -*-
"""D.I.V.E. AI 정착 시뮬레이터 (Python) - 안정화 버전

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nkQHoZ4QQ1kSN3UL8cE6YmUaYPrlkUsG
"""

pip! install streamlit pandas plotly requests

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import requests
import json

# ---------------------------------
# 데이터 로드 (가상 데이터)
# ---------------------------------
@st.cache_data
def load_data():
    region_data = [
        { 'id': 'A', 'name': '강원도 강릉시', 'budget': 280, 'job_tags': ['local', 'digital'], 'community': 4, 'scores': { '비용': 3, '일자리': 4, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
        { 'id': 'B', 'name': '전라북도 전주시', 'budget': 220, 'job_tags': ['local', 'public'], 'community': 5, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 5, '접근성': 4, '문화/여가': 5 } },
        { 'id': 'C', 'name': '제주특별자치도 제주시', 'budget': 350, 'job_tags': ['digital', 'local'], 'community': 4, 'scores': { '비용': 2, '일자리': 5, '커뮤니티': 4, '접근성': 3, '문화/여가': 5 } },
        { 'id': 'D', 'name': '경상북도 안동시', 'budget': 180, 'job_tags': ['local', 'public'], 'community': 3, 'scores': { '비용': 5, '일자리': 2, '커뮤니티': 3, '접근성': 2, '문화/여가': 4 } },
        { 'id': 'E', 'name': '전라남도 순천시', 'budget': 200, 'job_tags': ['local', 'public'], 'community': 4, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
        { 'id': 'F', 'name': '충청남도 공주시', 'budget': 190, 'job_tags': ['public', 'local'], 'community': 3, 'scores': { '비용': 4, '일자리': 2, '커뮤니티': 3, '접근성': 3, '문화/여가': 3 } },
        { 'id': 'G', 'name': '세종특별자치시', 'budget': 400, 'job_tags': ['public', 'digital'], 'community': 2, 'scores': { '비용': 2, '일자리': 5, '커뮤니티': 2, '접근성': 5, '문화/여가': 4 } },
        { 'id': 'H', 'name': '경상남도 남해군', 'budget': 150, 'job_tags': ['local'], 'community': 5, 'scores': { '비용': 5, '일자리': 2, '커뮤니티': 5, '접근성': 1, '문화/여가': 2 } },
    ]

    job_data = [
        { 'id': 1, 'name': '강릉시 관광 스타트업 마케터', 'type': 'local', 'region_id': 'A', 'base_score': 92 },
        { 'id': 2, 'name': '전주시 한옥마을 콘텐츠 기획자', 'type': 'local', 'region_id': 'B', 'base_score': 95 },
        { 'id': 3, 'name': '제주시 IT기업 원격근무 개발자', 'type': 'digital', 'region_id': 'C', 'base_score': 98 },
        { 'id': 4, 'name': '안동시 유교문화 디지털 아카이브 구축', 'type': 'public', 'region_id': 'D', 'base_score': 88 },
        { 'id': 5, 'name': '순천만국가정원 스마트팜 운영요원', 'type': 'local', 'region_id': 'E', 'base_score': 91 },
        { 'id': 6, 'name': '공주시 백제문화유산 VR/AR 개발', 'type': 'public', 'region_id': 'F', 'base_score': 85 },
        { 'id': 7, 'name': '세종시 정부청사 IT 행정보조', 'type': 'public', 'region_id': 'G', 'base_score': 90 },
        { 'id': 8, 'name': '남해군 귀농귀촌 지원센터 코디네이터', 'type': 'local', 'region_id': 'H', 'base_score': 89 },
        { 'id': 9, 'name': '원격 근무 프론트엔드 개발자', 'type': 'digital', 'region_id': None, 'base_score': 95 },
        { 'id': 10, 'name': '원격 근무 UI/UX 디자이너', 'type': 'digital', 'region_id': None, 'base_score': 92 },
        { 'id': 11, 'name': '원격 근무 퍼포먼스 마케터', 'type': 'digital', 'region_id': None, 'base_score': 88 },
    ]

    benefits_data = [
        { 'id': 1, 'region_id': 'A', 'category': '청년', 'name': '강릉시 청년 월세 지원', 'description': '월 최대 20만원, 12개월간 주거 임차료 지원' },
        { 'id': 2, 'region_id': 'A', 'category': '창업', 'name': '로컬크리에이터 육성 지원', 'description': '지역자원 활용 창업 아이템 사업화 자금 최대 5천만원 지원' },
        { 'id': 3, 'region_id': 'B', 'category': '청년', 'name': '전주청년 상상(相生)카드', 'description': '미취업 청년에게 월 30만원 활동비 지원' },
        { 'id': 4, 'region_id': 'B', 'category': '주거', 'name': '신혼부부 주택 전세자금 대출이자 지원', 'description': '전세자금 대출 잔액의 1.2% 지원' },
        { 'id': 5, 'region_id': 'C', 'category': '주거', 'name': '제주형 청년 주거보장 정책', 'description': '행복주택, 주거비 지원 등 다양한 주거 정책 제공' },
        { 'id': 6, 'region_id': 'C', 'category': '창업', 'name': '제주 테크노파크 입주기업 지원', 'description': '사무공간, R&D, 마케팅 등 종합 지원' },
        { 'id': 7, 'region_id': 'D', 'category': '주거', 'name': '귀농인 정착장려금 지원', 'description': '세대당 30만원/월, 최대 2년간 지원' },
        { 'id': 8, 'region_id': 'E', 'category': '청년', 'name': '순천시 청년 점프업 프로젝트', 'description': '청년 구직자 역량강화 교육 및 취업연계 지원' },
        { 'id': 9, 'region_id': 'F', 'category': '육아', 'name': '공주시 출산장려금', 'description': '첫째 300만원, 둘째 500만원, 셋째 이상 1,000만원 지원' },
        { 'id': 10, 'region_id': 'G', 'category': '육아', 'name': '세종시 공동육아나눔터', 'description': '장난감 대여 및 육아 품앗이 커뮤니티 공간 제공' },
        { 'id': 11, 'region_id': 'H', 'category': '주거', 'name': '남해군 귀농인의 집', 'description': '저렴한 임대료로 임시 거주공간 제공' },
    ]
    return pd.DataFrame(region_data), pd.DataFrame(job_data), pd.DataFrame(benefits_data)

region_df, job_df, benefits_df = load_data()

# ---------------------------------
# Streamlit 앱 UI 구성
# ---------------------------------

st.set_page_config(layout="wide", page_title="D.I.V.E - AI 정착 시뮬레이터")

# --- 타이틀 ---
st.title("D.I.V.E - AI 정착 시뮬레이터 🧭")
st.markdown("데이터와 AI를 기반으로 당신에게 가장 적합한 정착지를 예측해보세요.")

# --- 사이드바: 사용자 입력 ---
with st.sidebar:
    st.header("나의 정착 조건 설정하기")
    budget = st.slider("월 가용 예산 (만원)", 100, 500, 200, 10)
    job_type_display = st.selectbox("희망 직무 유형", ('디지털/원격', '지역 기반(농업/관광)', '공공/사회서비스'))
    community_labels = ['매우 낮음', '낮음', '중간', '높음', '매우 높음']
    community_display = st.select_slider("커뮤니티 선호도", options=community_labels, value='중간')

    st.divider()

    st.header("API 설정")
    api_key = st.text_input("Google Gemini API 키를 입력하세요.", type="password", help="AI 기능을 사용하려면 API 키가 필요합니다.")

    # 내부 값 변환
    job_type_map = {'디지털/원격': 'digital', '지역 기반(농업/관광)': 'local', '공공/사회서비스': 'public'}
    job_type_val = job_type_map[job_type_display]
    community_val = community_labels.index(community_display) + 1

# ---------------------------------
# 핵심 로직: 지역 추천
# ---------------------------------
# 직무 유형으로 1차 필터링
filtered_regions = region_df[region_df['job_tags'].apply(lambda x: job_type_val in x)].copy()
# 예산으로 2차 필터링
filtered_regions = filtered_regions[filtered_regions['budget'] <= budget]

# 필터링된 결과가 없으면 예산 조건만으로 다시 필터링
if filtered_regions.empty:
    filtered_regions = region_df[region_df['budget'] <= budget].copy()
# 그래도 없으면 전체 지역을 대상으로 함
if filtered_regions.empty:
    filtered_regions = region_df.copy()

scores = []
for index, row in filtered_regions.iterrows():
    community_diff = abs(row['community'] - community_val)
    # 점수 계산: 커뮤니티 적합도 40%, 일자리 점수 60%
    score = (5 - community_diff) * 0.4 + row['scores']['일자리'] * 0.6
    scores.append(score)

filtered_regions['final_score'] = scores
best_region = filtered_regions.loc[filtered_regions['final_score'].idxmax()]


# ---------------------------------
# 결과 디스플레이
# ---------------------------------
st.header("시뮬레이션 결과")
st.subheader(f"당신의 조건에 가장 적합한 추천 지역은 **:blue[{best_region['name']}]** 입니다.")

col1, col2 = st.columns(2)

with col1:
    st.markdown("##### 종합 정착 점수")
    # Plotly 레이더 차트
    radar_fig = go.Figure()
    radar_fig.add_trace(go.Scatterpolar(
          r=list(best_region['scores'].values()),
          theta=list(best_region['scores'].keys()),
          fill='toself',
          name='정착 적합도'
    ))
    radar_fig.update_layout(
      polar=dict(
        radialaxis=dict(
          visible=True,
          range=[0, 5]
        )),
      showlegend=False,
      height=400,
      margin=dict(l=50, r=50, t=50, b=50) # 여백 조정
    )
    st.plotly_chart(radar_fig, use_container_width=True)

with col2:
    st.markdown("##### 예상 월별 수입/지출")
    income = (best_region['scores']['일자리'] / 5) * 400 + 150
    finance_data = {
        "금액 (만원)": [income, best_region['budget']]
    }
    finance_df = pd.DataFrame(finance_data, index=["예상 수입", "예상 지출"])
    st.bar_chart(finance_df, height=400)


st.divider()

# --- 추가 정보 섹션 ---
tab1, tab2, tab3 = st.tabs(["🎁 예상 수혜 가능 혜택", "✨ 추천 일자리 매칭", "🤖 AI 인사이트"])

with tab1:
    st.subheader(f"{best_region['name']}에서 받을 수 있는 혜택")
    matched_benefits = benefits_df[benefits_df['region_id'] == best_region['id']]
    if not matched_benefits.empty:
        for index, row in matched_benefits.iterrows():
            with st.expander(f"**[{row['category']}]** {row['name']}"):
                st.write(row['description'])
    else:
        st.info("이 지역에 대한 맞춤형 혜택 정보가 아직 없습니다.")


with tab2:
    st.subheader("나를 위한 추천 일자리 Top 3")
    # job_df의 복사본을 만들어 작업하여 SettingWithCopyWarning 방지
    jobs_to_match = job_df.copy()

    # 디지털 직무는 지역 상관없이, 그 외 직무는 지역 일치 조건
    is_digital_remote = (jobs_to_match['type'] == 'digital') & jobs_to_match['region_id'].isnull()
    is_local_match = jobs_to_match['region_id'] == best_region['id']

    matched_jobs = jobs_to_match[(jobs_to_match['type'] == job_type_val) & (is_digital_remote | is_local_match)]

    if not matched_jobs.empty:
        suitability_scores = []
        for idx, job in matched_jobs.iterrows():
            score = job['base_score']
            if community_val >= 4 and best_region['community'] >= 4:
                score += 5
            if budget > best_region['budget'] + 50:
                score += 3
            suitability_scores.append(min(99, score))

        matched_jobs['suitability'] = suitability_scores
        top3_jobs = matched_jobs.sort_values(by='suitability', ascending=False).head(3)

        for idx, job in top3_jobs.iterrows():
            st.markdown(f"**{job['name']}**")
            st.progress(job['suitability'], text=f"적합도: {job['suitability']}%")
    else:
        st.info("현재 조건에 맞는 추천 일자리가 없습니다.")

with tab3:
    st.subheader("AI에게 더 자세한 정보 얻기")

    if not api_key:
        st.warning("AI 기능을 사용하려면 사이드바에 Google Gemini API 키를 입력해주세요.")
    else:
        if st.button("✨ AI 정착 컨설턴트에게 조언받기"):
            with st.spinner("AI가 당신을 위한 조언을 생성 중입니다..."):
                prompt = f"""
                당신은 친절하고 지식이 풍부한 정착 컨설턴트입니다.
                한 사용자가 '{best_region['name']}'으로의 이주를 고려하고 있습니다.
                이 지역의 특징은 {best_region['scores']} (5점 만점) 입니다.
                사용자의 프로필은 월 예산 {budget}만원, 희망 직무 '{job_type_display}', 커뮤니티 선호도 '{community_display}'입니다.
                이 정보를 바탕으로, 해당 지역에서의 삶이 어떨지에 대해 현실적이면서도 격려가 되는 짧은 단락(3~4문장)을 작성해주세요.
                사용자의 프로필에 맞춰 장단점을 언급해주세요.
                """

                payload = {"contents": [{"role": "user", "parts": [{"text": prompt}]}]}
                api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

                try:
                    response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
                    response.raise_for_status()
                    result = response.json()

                    if 'candidates' in result and result['candidates']:
                        st.success(result['candidates'][0]['content']['parts'][0]['text'])
                    else:
                        st.error(f"AI로부터 유효한 응답을 받지 못했습니다. API 응답: {result}")
                except requests.exceptions.RequestException as e:
                    st.error(f"API 호출 중 오류가 발생했습니다: {e}")
                except Exception as e:
                    st.error(f"응답 처리 중 알 수 없는 오류가 발생했습니다: {e}")

        if st.button("✨ 나만의 정착 계획 초안 받기"):
            with st.spinner("맞춤형 계획을 생성 중입니다..."):
                prompt = f"""
                '{best_region['name']}'으로 이주를 계획중인 사람을 위한 5단계 정착 계획 초안을 생성해줘.
                이 사람의 프로필은 월 예산 {budget}만원, 희망 직무 '{job_type_display}', 커뮤니티 선호도 '{community_display}'이야.
                각 단계는 실질적이고 실행 가능해야 하며, 프로필에 맞춰 개인화 되어야 해.
                """

                schema = {
                    "type": "OBJECT",
                    "properties": {
                        "plan": {
                            "type": "ARRAY",
                            "items": {
                                "type": "OBJECT",
                                "properties": {"task": {"type": "STRING"},"reason": {"type": "STRING"}},
                                "required": ["task", "reason"]
                            }
                        }
                    },
                    "required": ["plan"]
                }

                payload = {
                    "contents": [{"role": "user", "parts": [{"text": prompt}]}],
                    "generationConfig": { "responseMimeType": "application/json", "responseSchema": schema }
                }
                api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

                try:
                    response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
                    response.raise_for_status()
                    result = response.json()

                    if 'candidates' in result and result['candidates']:
                        plan_data = json.loads(result['candidates'][0]['content']['parts'][0]['text'])
                        for i, item in enumerate(plan_data.get('plan', [])):
                            st.markdown(f"**{i+1}단계. {item['task']}**")
                            st.caption(f"이유: {item['reason']}")
                    else:
                        st.error(f"AI로부터 유효한 계획을 받지 못했습니다. API 응답: {result}")
                except requests.exceptions.RequestException as e:
                    st.error(f"API 호출 중 오류가 발생했습니다: {e}")
                except json.JSONDecodeError:
                    st.error("AI가 보낸 응답을 파싱하는 데 실패했습니다. 응답 형식이 올바르지 않을 수 있습니다.")
                except Exception as e:
                    st.error(f"응답 처리 중 알 수 없는 오류가 발생했습니다: {e}")
