# -*- coding: utf-8 -*-
"""D.I.V.E. AI 정착 시뮬레이터 (Python 배포용 최종버전)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13LZalRlcnXaOvONIIdyy9QO0DXpsNq7z
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import requests
import json
import random

# ---------------------------------
# 데이터 로드 (가상 데이터)
# ---------------------------------
@st.cache_data
def load_data():
    """애플리케이션에 사용될 모든 데이터를 로드하고 DataFrame으로 변환합니다."""
    region_data = [
        { 'id': 'A', 'name': '강원도 강릉시', 'budget': 280, 'job_tags': ['local', 'digital'], 'community': 4, 'scores': { '비용': 3, '일자리': 4, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
        { 'id': 'B', 'name': '전라북도 전주시', 'budget': 220, 'job_tags': ['local', 'public'], 'community': 5, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 5, '접근성': 4, '문화/여가': 5 } },
        { 'id': 'C', 'name': '제주특별자치도 제주시', 'budget': 350, 'job_tags': ['digital', 'local'], 'community': 4, 'scores': { '비용': 2, '일자리': 5, '커뮤니티': 4, '접근성': 3, '문화/여가': 5 } },
        { 'id': 'D', 'name': '경상북도 안동시', 'budget': 180, 'job_tags': ['local', 'public'], 'community': 3, 'scores': { '비용': 5, '일자리': 2, '커뮤니티': 3, '접근성': 2, '문화/여가': 4 } },
        { 'id': 'E', 'name': '전라남도 순천시', 'budget': 200, 'job_tags': ['local', 'public'], 'community': 4, 'scores': { '비용': 4, '일자리': 3, '커뮤니티': 4, '접근성': 3, '문화/여가': 4 } },
    ]

    job_data = [
        { 'id': 1, 'name': '강릉시 관광 스타트업 마케터', 'type': 'local', 'region_id': 'A', 'base_score': 92, 'detail': '강릉의 로컬 자원을 활용한 관광 상품을 기획하고 온라인으로 홍보하는 업무입니다. SNS 마케팅 경험자를 우대합니다.' },
        { 'id': 2, 'name': '전주시 한옥마을 콘텐츠 기획자', 'type': 'local', 'region_id': 'B', 'base_score': 95, 'detail': '전주 한옥마을의 전통 문화를 현대적으로 재해석하는 콘텐츠(영상, 글)를 제작합니다. 스토리텔링 능력이 중요합니다.'},
        { 'id': 3, 'name': '제주시 IT기업 원격근무 개발자', 'type': 'digital', 'region_id': 'C', 'base_score': 98, 'detail': '제주시에 위치한 IT 기업의 원격 근무 포지션입니다. 최신 기술 스택에 대한 이해가 필요합니다.' },
        { 'id': 4, 'name': '안동시 유교문화 디지털 아카이브 구축', 'type': 'public', 'region_id': 'D', 'base_score': 88, 'detail': '안동의 유교 문화 유산을 디지털 데이터로 변환하고, 이를 관리 및 활용하는 플랫폼을 구축하는 공공 프로젝트입니다.' },
        { 'id': 5, 'name': '순천만국가정원 스마트팜 운영요원', 'type': 'local', 'region_id': 'E', 'base_score': 91, 'detail': 'IoT 기술을 활용한 스마트팜 시스템을 관리하고, 식물 생육 데이터를 분석하여 생산성을 높이는 업무를 담당합니다.' },
        { 'id': 9, 'name': '원격 근무 프론트엔드 개발자', 'type': 'digital', 'region_id': None, 'base_score': 95, 'detail': '최신 웹 기술(React, Vue.js)을 활용하여 다양한 서비스의 사용자 인터페이스를 개발합니다. 협업 툴 사용에 능숙해야 합니다.'},
    ]

    benefits_data = [
        { 'id': 1, 'region_id': 'A', 'category': '청년', 'name': '강릉시 청년 월세 지원', 'description': '월 최대 20만원, 12개월간 주거 임차료 지원. 관내 전입 청년 대상.' },
        { 'id': 2, 'region_id': 'A', 'category': '창업', 'name': '로컬크리에이터 육성 지원', 'description': '지역자원 활용 창업 아이템 사업화 자금 최대 5천만원 지원.' },
        { 'id': 3, 'region_id': 'B', 'category': '청년', 'name': '전주청년 상상(相生)카드', 'description': '미취업 청년에게 월 30만원 활동비 지원.' },
        { 'id': 5, 'region_id': 'C', 'category': '주거', 'name': '제주형 청년 주거보장 정책', 'description': '행복주택, 주거비 지원 등 다양한 주거 정책 제공.' },
        { 'id': 8, 'region_id': 'E', 'category': '청년', 'name': '순천시 청년 점프업 프로젝트', 'description': '청년 구직자 역량강화 교육 및 취업연계 지원.' },
        { 'id': 7, 'region_id': 'D', 'category': '주거', 'name': '귀농인 정착장려금 지원', 'description': '세대당 30만원/월, 최대 2년간 지원.' },
    ]
    return pd.DataFrame(region_data), pd.DataFrame(job_data), pd.DataFrame(benefits_data)

region_df, job_df, benefits_df = load_data()

# ---------------------------------
# Streamlit 앱 UI 구성
# ---------------------------------

st.set_page_config(layout="wide", page_title="D.I.V.E - AI 정착 나침반")

# --- CSS 스타일 ---
st.markdown("""
<style>
    .stApp {
        background-color: #f1f5f9; /* slate-100 */
    }
    .main > div {
        padding-top: 2rem;
    }
    .st-emotion-cache-1y4p8pa {
        padding-top: 2rem;
    }
    .st-emotion-cache-16txtl3 {
        padding: 2rem 1.5rem;
    }
    h1 {
        font-weight: 900;
        font-size: 2.25rem;
        color: #0f172a; /* slate-900 */
    }
    h2 {
        font-weight: 700;
        font-size: 1.5rem;
        color: #1e293b; /* slate-800 */
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)


# --- Header ---
with st.container():
    st.markdown("""
    <div style="background-color: rgba(255, 255, 255, 0.8); backdrop-filter: blur(10px); padding: 1rem 2rem; position: sticky; top: 0; z-index: 1000; box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); margin-bottom: 2rem;">
        <h1 style="font-size: 2rem; font-weight: 900;">D<span style="color: #2563eb;">.</span>I<span style="color: #2563eb;">.</span>V<span style="color: #2563eb;">.</span>E 🧭</h1>
        <p style="color: #475569;">AI 정착 나침반: 당신의 새로운 시작을 위한 데이터 기반 가이드</p>
    </div>
    """, unsafe_allow_html=True)

# --- Main Layout ---
col_left, col_right = st.columns([1, 2])

with col_left:
    with st.container():
        with st.container(border=True):
            st.subheader("나의 정착 조건 설정하기")
            budget = st.slider("월 가용 예산", 100, 500, 200, 10, format="%d만원")
            job_type_display = st.selectbox("희망 직무 유형", ('디지털/원격', '지역 기반(농업/관광)', '공공/사회서비스'))
            community_labels = ['매우 낮음', '낮음', '중간', '높음', '매우 높음']
            community_display = st.select_slider("커뮤니티 선호도", options=community_labels, value='중간')
            interests = st.text_input("나의 관심사 (AI 커뮤니티 추천용)", placeholder="예: 등산, 독서, 코딩 스터디")

            # API 키 입력 필드. 배포 시에는 st.secrets 사용
            api_key_input = st.text_input("Google Gemini API 키", type="password", help="클라우드 배포 시에는 Secrets에 키를 저장하세요.")

# ---------------------------------
# 핵심 로직
# ---------------------------------
job_type_map = {'디지털/원격': 'digital', '지역 기반(농업/관광)': 'local', '공공/사회서비스': 'public'}
job_type_val = job_type_map[job_type_display]
community_val = community_labels.index(community_display) + 1

filtered_regions = region_df[(region_df['budget'] <= budget) & (region_df['job_tags'].apply(lambda x: job_type_val in x))].copy()
if filtered_regions.empty:
    filtered_regions = region_df[region_df['budget'] <= budget].copy()
if filtered_regions.empty:
    filtered_regions = region_df.copy()

scores = [(5 - abs(row['community'] - community_val)) * 0.4 + row['scores']['일자리'] * 0.6 for _, row in filtered_regions.iterrows()]
filtered_regions['final_score'] = scores
best_region = filtered_regions.loc[filtered_regions['final_score'].idxmax()]

# --- 결과 디스플레이 ---
with col_right:
    # --- 시뮬레이션 결과 ---
    with st.container(border=True):
        st.subheader("시뮬레이션 결과")
        st.markdown(f"당신의 조건에 가장 적합한 추천 지역은 **:blue[{best_region['name']}]** 입니다.")

        res_col1, res_col2 = st.columns(2)
        with res_col1:
            st.markdown("**종합 정착 점수**")
            radar_fig = go.Figure(data=go.Scatterpolar(
                r=list(best_region['scores'].values()),
                theta=list(best_region['scores'].keys()),
                fill='toself', name='정착 적합도'
            ))
            radar_fig.update_layout(height=300, margin=dict(l=50, r=50, t=50, b=50), polar=dict(radialaxis=dict(visible=True, range=[0, 5])))
            st.plotly_chart(radar_fig, use_container_width=True)

        with res_col2:
            st.markdown("**예상 월별 수입/지출**")
            income = (best_region['scores']['일자리'] / 5) * 400 + 150
            finance_data = {'금액(만원)': [income, best_region['budget']]}
            finance_df = pd.DataFrame(finance_data, index=["예상 수입", "예상 지출"])
            st.bar_chart(finance_df, height=300)

    # --- 혜택, 일자리, AI 인사이트 ---
    st.write("") # Add some space
    with st.container(border=True):
        st.subheader("🎁 예상 수혜 가능 혜택")
        matched_benefits = benefits_df[benefits_df['region_id'] == best_region['id']]
        if not matched_benefits.empty:
            for _, row in matched_benefits.iterrows():
                st.markdown(f"- **[{row['category']}]** {row['name']}")
        else:
            st.info("이 지역에 대한 맞춤형 혜택 정보가 아직 없습니다.")

    st.write("")
    with st.container(border=True):
        st.subheader("✨ 추천 일자리 매칭")
        jobs_to_match = job_df.copy()
        is_digital_remote = (jobs_to_match['type'] == 'digital') & jobs_to_match['region_id'].isnull()
        is_local_match = jobs_to_match['region_id'] == best_region['id']
        matched_jobs = jobs_to_match[(jobs_to_match['type'] == job_type_val) & (is_digital_remote | is_local_match)]

        if not matched_jobs.empty:
            suitability_scores = [min(99, job['base_score'] + (5 if community_val >= 4 and best_region['community'] >= 4 else 0) + (3 if budget > best_region['budget'] + 50 else 0) + random.randint(0,2)) for _, job in matched_jobs.iterrows()]
            matched_jobs['suitability'] = suitability_scores
            top_jobs = matched_jobs.sort_values(by='suitability', ascending=False).head(3)

            for _, job in top_jobs.iterrows():
                with st.expander(f"{job['name']} (적합도: {job['suitability']}%)"):
                    st.write(job['detail'])
        else:
            st.info("현재 조건에 맞는 추천 일자리가 없습니다.")

    st.write("")
    with st.container(border=True):
        st.subheader("🤖 AI 인사이트")
        st.caption("AI의 도움을 받아 더 깊이있는 정보를 얻어보세요.")

        # st.secrets을 우선적으로 확인하고, 없으면 사용자가 입력한 키를 사용
        api_key = api_key_input or st.secrets.get("GEMINI_API_KEY")

        if not api_key:
            st.warning("AI 기능을 사용하려면 좌측에 Google Gemini API 키를 입력하거나, 배포 환경의 Secrets에 키를 설정해주세요.")
        else:
            ai_col1, ai_col2, ai_col3 = st.columns(3)
            with ai_col1:
                if st.button("AI 정착 컨설턴트", use_container_width=True):
                    with st.spinner("AI가 답변을 생성 중입니다..."):
                        prompt = f"당신은 친절한 정착 컨설턴트입니다. 사용자가 '{best_region['name']}'으로 이주를 고려중입니다. 지역 특징은 {best_region['scores']} (5점 만점)이고, 사용자 프로필은 월 예산 {budget}만원, 희망 직무 '{job_type_display}', 커뮤니티 선호도 '{community_display}'입니다. 이 정보를 바탕으로, 해당 지역에서의 삶이 어떨지에 대해 현실적이면서도 격려가 되는 짧은 단락을 작성해주세요."
                        payload = {"contents": [{"role": "user", "parts": [{"text": prompt}]}]}
                        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
                        try:
                            response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
                            response.raise_for_status()
                            result = response.json()
                            if 'candidates' in result: st.info(result['candidates'][0]['content']['parts'][0]['text'])
                            else: st.error("AI 응답 형식이 올바르지 않습니다.")
                        except Exception as e: st.error(f"AI 호출 중 오류 발생: {e}")

            with ai_col2:
                if st.button("AI 정착 계획", use_container_width=True):
                    with st.spinner("AI가 답변을 생성 중입니다..."):
                        prompt = f"'{best_region['name']}'으로 이주를 계획중인 사람을 위한 5단계 정착 계획 초안을 생성해줘. 이 사람의 프로필은 월 예산 {budget}만원, 희망 직무 '{job_type_display}', 커뮤니티 선호도 '{community_display}'이야. 각 단계는 실질적이고 실행 가능해야 해."
                        st.info("AI 정착 계획 기능은 현재 개발 중입니다.") # Placeholder

            with ai_col3:
                if st.button("AI 커뮤니티 찾기", use_container_width=True):
                    with st.spinner("AI가 답변을 생성 중입니다..."):
                         prompt = f"'{best_region['name']}' 지역으로 이주할 예정인 사람을 위한 맞춤형 커뮤니티 3가지를 추천해줘. 이 사람의 관심사는 '{interests or '다양한 활동'}'이야. 각 커뮤니티의 이름과 어떤 활동을 하는지 간략히 설명해줘."
                         st.info("AI 커뮤니티 찾기 기능은 현재 개발 중입니다.") # Placeholder